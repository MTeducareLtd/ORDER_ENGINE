using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

public partial class Test : System.Web.UI.Page
{
   
	protected void BtnSearch_Click(object sender, System.EventArgs e)
	{
		//Validate if all information is entered correctly
		if (ddlDivision.SelectedIndex == 0) {
			Show_Error_Success_Box("E", "0001");
			ddlDivision.Focus();
			return;
		}

		if (ddlAcadYear.SelectedIndex == 0) {
			Show_Error_Success_Box("E", "0002");
			ddlAcadYear.Focus();
			return;
		}

		if (ddlCentre.SelectedIndex == 0) {
			Show_Error_Success_Box("E", "0006");
			ddlCentre.Focus();
			return;
		}

		if (ddlStandard.SelectedIndex == 0) {
			Show_Error_Success_Box("E", "0003");
			ddlStandard.Focus();
			return;
		}

		if (ddlTestCategory.SelectedIndex == 0) {
			Show_Error_Success_Box("E", "0012");
			ddlTestCategory.Focus();
			return;
		}

		if (ddlStudentName.SelectedIndex == 0 | ddlStudentName.Items.Count == 0) {
			Show_Error_Success_Box("E", "0030");
			ddlStudentName.Focus();
			return;
		}

		string BatchCode = "";
		int BatchCnt = 0;
		int BatchSelCnt = 0;
		for (BatchCnt = 0; BatchCnt <= ddlBatch.Items.Count - 1; BatchCnt++) {
			if (ddlBatch.Items(BatchCnt).Selected == true) {
				BatchSelCnt = BatchSelCnt + 1;
			}
		}

		if (BatchSelCnt == 0) {
			//When all is selected
			for (BatchCnt = 0; BatchCnt <= ddlBatch.Items.Count - 1; BatchCnt++) {
				BatchCode = BatchCode + ddlBatch.Items(BatchCnt).Value + ",";
			}
			if (Strings.Right(BatchCode, 1) == ",")
				BatchCode = Strings.Left(BatchCode, Strings.Len(BatchCode) - 1);
		} else {
			for (BatchCnt = 0; BatchCnt <= ddlBatch.Items.Count - 1; BatchCnt++) {
				if (ddlBatch.Items(BatchCnt).Selected == true) {
					BatchCode = BatchCode + ddlBatch.Items(BatchCnt).Value + ",";
				}
			}
			if (Strings.Right(BatchCode, 1) == ",")
				BatchCode = Strings.Left(BatchCode, Strings.Len(BatchCode) - 1);
		}

		string TestType_ID = "";
		string TestType_Name = "";
		int TypeCnt = 0;
		int TypeSelCnt = 0;
		for (TypeCnt = 0; TypeCnt <= ddlTestType.Items.Count - 1; TypeCnt++) {
			if (ddlTestType.Items(TypeCnt).Selected == true) {
				TypeSelCnt = TypeSelCnt + 1;
			}
		}

		if (TypeSelCnt == 0) {
			//When all is selected
			for (TypeCnt = 0; TypeCnt <= ddlTestType.Items.Count - 1; TypeCnt++) {
				TestType_ID = TestType_ID + ddlTestType.Items(TypeCnt).Value + ",";
				TestType_Name = TestType_Name + ddlTestType.Items(TypeCnt).ToString + ",";
			}
			if (Strings.Right(TestType_ID, 1) == ",")
				TestType_ID = Strings.Left(TestType_ID, Strings.Len(TestType_ID) - 1);
			if (Strings.Right(TestType_Name, 1) == ",")
				TestType_Name = Strings.Left(TestType_Name, Strings.Len(TestType_Name) - 1);
		} else {
			for (TypeCnt = 0; TypeCnt <= ddlTestType.Items.Count - 1; TypeCnt++) {
				if (ddlTestType.Items(TypeCnt).Selected == true) {
					TestType_ID = TestType_ID + ddlTestType.Items(TypeCnt).Value + ",";
					TestType_Name = TestType_Name + ddlTestType.Items(TypeCnt).ToString + ",";
				}
			}
			if (Strings.Right(TestType_ID, 1) == ",")
				TestType_ID = Strings.Left(TestType_ID, Strings.Len(TestType_ID) - 1);
			if (Strings.Right(TestType_Name, 1) == ",")
				TestType_Name = Strings.Left(TestType_Name, Strings.Len(TestType_Name) - 1);
		}

		string Test_ID = "";
		string Test_Name = "";
		int TestCnt = 0;
		int TestSelCnt = 0;
		for (TestCnt = 0; TestCnt <= ddlTestName.Items.Count - 1; TestCnt++) {
			if (ddlTestName.Items(TestCnt).Selected == true) {
				TestSelCnt = TestSelCnt + 1;
			}
		}

		if (TestSelCnt == 0) {
			//When all is selected
			for (TypeCnt = 0; TypeCnt <= ddlTestName.Items.Count - 1; TypeCnt++) {
				Test_ID = Test_ID + ddlTestName.Items(TypeCnt).Value + ",";
				Test_Name = Test_Name + ddlTestName.Items(TypeCnt).ToString + ",";
			}
			if (Strings.Right(Test_ID, 1) == ",")
				Test_ID = Strings.Left(Test_ID, Strings.Len(Test_ID) - 1);
			if (Strings.Right(Test_Name, 1) == ",")
				Test_Name = Strings.Left(Test_Name, Strings.Len(Test_Name) - 1);
		} else {
			for (TypeCnt = 0; TypeCnt <= ddlTestName.Items.Count - 1; TypeCnt++) {
				if (ddlTestName.Items(TypeCnt).Selected == true) {
					Test_ID = Test_ID + ddlTestName.Items(TypeCnt).Value + ",";
					Test_Name = Test_Name + ddlTestName.Items(TypeCnt).ToString + ",";
				}
			}
			if (Strings.Right(Test_ID, 1) == ",")
				Test_ID = Strings.Left(Test_ID, Strings.Len(Test_ID) - 1);
			if (Strings.Right(Test_Name, 1) == ",")
				Test_Name = Strings.Left(Test_Name, Strings.Len(Test_Name) - 1);
		}

		ControlVisibility("Result");

		string SBEntryCode = null;
		SBEntryCode = ddlStudentName.SelectedValue.ToString;

		lblTestID_Result.Text = Test_ID;

		//For MCQ Type test
		if (ddlTestCategory.SelectedValue == "002") {
			DataSet dsGrid = ProductController.Report_Test_MCQ_Test_Subject_Student_Rank(Test_ID, SBEntryCode, 1);
			dlGridSummaryReport.DataSource = dsGrid.Tables(0);
			dlGridSummaryReport.DataBind();

			dlGridDetailsofAnswering.DataSource = dsGrid.Tables(1);
			dlGridDetailsofAnswering.DataBind();
			dlGridDetailsofAnswering.Visible = true;

			dlGridOverallToppers.DataSource = dsGrid.Tables(2);
			dlGridOverallToppers.DataBind();

			lbltotalcount.Text = dsGrid.Tables(0).Rows.Count - 1;

			DivResult_MCQ.Visible = true;
		} else {
			DataSet dsGrid = ProductController.Report_Test_NonMCQ_Test_Subject_Student_Rank(Test_ID, SBEntryCode, 1);
			dlGridSummaryReport.DataSource = dsGrid.Tables(0);
			dlGridSummaryReport.DataBind();

			dlGridDetailsofAnswering.DataSource = null;
			dlGridDetailsofAnswering.DataBind();
			dlGridDetailsofAnswering.Visible = false;

			dlGridOverallToppers.DataSource = dsGrid.Tables(1);
			dlGridOverallToppers.DataBind();

			lbltotalcount.Text = dsGrid.Tables(0).Rows.Count - 1;

			DivResult_MCQ.Visible = true;
		}

		lblDivision_Result.Text = ddlDivision.SelectedItem.ToString;
		lblAcadYear_Result.Text = ddlAcadYear.SelectedItem.ToString;
		lblStandard_Result.Text = ddlStandard.SelectedItem.ToString;
		lblTestCategory_Result.Text = ddlTestCategory.SelectedItem.ToString;
		lblCentre_Result.Text = ddlCentre.SelectedItem.ToString;
		lblStudentName_Result.Text = ddlStudentName.SelectedItem.ToString;
		lblRollNo_Result.Text = txtRollNo.Text;
		lblTestType_Result.Text = TestType_Name;
		lblTestName_Result.Text = Test_Name;
	}

	protected void Page_Load(object sender, System.EventArgs e)
	{
		if (!IsPostBack) {
			ControlVisibility("Search");
			FillDDL_Division();
			FillDDL_AcadYear();
			FillDDL_TestCategories();
			FillDDL_TestTypes();
			//FillAttendanceType()
			//FillEntityType()
		}
	}

	private void FillDDL_TestCategories()
	{
		DataSet dsTestCategory = ProductController.GetAllActiveTestCategory();
		BindDDL(ddlTestCategory, dsTestCategory, "TestCategory_Name", "TestCategory_Id");
		ddlTestCategory.Items.Insert(0, "Select");
		ddlTestCategory.SelectedIndex = 0;

	}

	private void FillDDL_TestTypes()
	{
		DataSet dsTestType = ProductController.GetAllActiveTestType();
		BindListBox(ddlTestType, dsTestType, "TestType_Name", "TestType_Id");

	}

	private void FillDDL_TestName()
	{
		ddlTestName.Items.Clear();

		//Validate if all information is entered correctly
		if (ddlDivision.SelectedIndex == 0) {
			//Show_Error_Success_Box("E", "0001")
			//ddlDivision.Focus()
			return;
		}

		if (ddlAcadYear.SelectedIndex == 0) {
			//Show_Error_Success_Box("E", "0002")
			//ddlAcadYear.Focus()
			return;
		}

		if (ddlCentre.SelectedIndex == 0) {
			//Show_Error_Success_Box("E", "0006")
			//ddlCentre.Focus()
			return;
		}

		if (ddlStandard.SelectedIndex == 0) {
			//Show_Error_Success_Box("E", "0003")
			//ddlStandard.Focus()
			return;
		}

		if (ddlTestCategory.SelectedIndex == 0) {
			//Show_Error_Success_Box("E", "0012")
			//ddlTestCategory.Focus()
			return;
		}

		string BatchCode = "";
		int BatchCnt = 0;
		int BatchSelCnt = 0;
		for (BatchCnt = 0; BatchCnt <= ddlBatch.Items.Count - 1; BatchCnt++) {
			if (ddlBatch.Items(BatchCnt).Selected == true) {
				BatchSelCnt = BatchSelCnt + 1;
			}
		}

		if (BatchSelCnt == 0) {
			//When all is selected
			for (BatchCnt = 0; BatchCnt <= ddlBatch.Items.Count - 1; BatchCnt++) {
				BatchCode = BatchCode + ddlBatch.Items(BatchCnt).Value + ",";
			}
			if (Strings.Right(BatchCode, 1) == ",")
				BatchCode = Strings.Left(BatchCode, Strings.Len(BatchCode) - 1);
		} else {
			for (BatchCnt = 0; BatchCnt <= ddlBatch.Items.Count - 1; BatchCnt++) {
				if (ddlBatch.Items(BatchCnt).Selected == true) {
					BatchCode = BatchCode + ddlBatch.Items(BatchCnt).Value + ",";
				}
			}
			if (Strings.Right(BatchCode, 1) == ",")
				BatchCode = Strings.Left(BatchCode, Strings.Len(BatchCode) - 1);
		}

		string TestType_ID = "";
		int TypeCnt = 0;
		int TypeSelCnt = 0;
		for (TypeCnt = 0; TypeCnt <= ddlTestType.Items.Count - 1; TypeCnt++) {
			if (ddlTestType.Items(TypeCnt).Selected == true) {
				TypeSelCnt = TypeSelCnt + 1;
			}
		}

		if (TypeSelCnt == 0) {
			//When all is selected
			for (TypeCnt = 0; TypeCnt <= ddlTestType.Items.Count - 1; TypeCnt++) {
				TestType_ID = TestType_ID + ddlTestType.Items(TypeCnt).Value + ",";
			}
			if (Strings.Right(TestType_ID, 1) == ",")
				TestType_ID = Strings.Left(TestType_ID, Strings.Len(TestType_ID) - 1);
		} else {
			for (TypeCnt = 0; TypeCnt <= ddlTestType.Items.Count - 1; TypeCnt++) {
				if (ddlTestType.Items(TypeCnt).Selected == true) {
					TestType_ID = TestType_ID + ddlTestType.Items(TypeCnt).Value + ",";
				}
			}
			if (Strings.Right(TestType_ID, 1) == ",")
				TestType_ID = Strings.Left(TestType_ID, Strings.Len(TestType_ID) - 1);
		}

		string DivisionCode = null;
		DivisionCode = ddlDivision.SelectedValue;

		string YearName = null;
		YearName = ddlAcadYear.SelectedItem.ToString;

		string StandardCode = null;
		StandardCode = ddlStandard.SelectedValue;

		string TestName = null;
		TestName = "%";

		string DateRange = null;
		DateRange = id_date_range_picker_1.Value;

		string FromDate = null;
		string ToDate = null;
		FromDate = Strings.Left(DateRange, 10);
		if (string.IsNullOrEmpty(FromDate))
			FromDate = System.DateTime.Now.ToString("dd MMM yyyy");

		ToDate = Strings.Right(DateRange, 10);
		if (string.IsNullOrEmpty(ToDate))
			ToDate = System.DateTime.Now.ToString("dd MMM yyyy");

		string Centre_Code = null;
		Centre_Code = ddlCentre.SelectedItem.Value;

		DataSet dsTestName = ProductController.GetTestScheduleBy_Division_Year_Standard_Centre(DivisionCode, YearName, StandardCode, BatchCode, "01", ddlTestCategory.SelectedValue, TestType_ID, TestName, FromDate, ToDate,
		1, 0, Centre_Code, 2);

		BindListBox(ddlTestName, dsTestName, "Test_Name", "PKey");

	}

	private void FillDDL_Division()
	{
		Label lblHeader_Company_Code = default(Label);
		lblHeader_Company_Code = (Label)Master.FindControl("lblHeader_Company_Code");

		Label lblHeader_User_Code = default(Label);
		lblHeader_User_Code = (Label)Master.FindControl("lblHeader_User_Code");

		Label lblHeader_DBName = default(Label);
		lblHeader_DBName = (Label)Master.FindControl("lblHeader_DBName");

		if (string.IsNullOrEmpty(lblHeader_User_Code.Text))
			Response.Redirect("Default.aspx");

		DataSet dsDivision = ProductController.GetAllActiveUser_Company_Division_Zone_Center(lblHeader_User_Code.Text, lblHeader_Company_Code.Text, "", "", "2", lblHeader_DBName.Text);
		BindDDL(ddlDivision, dsDivision, "Division_Name", "Division_Code");
		ddlDivision.Items.Insert(0, "Select");
		ddlDivision.SelectedIndex = 0;


	}

	private void FillDDL_AcadYear()
	{
		DataSet dsAcadYear = ProductController.GetAllActiveUser_AcadYear();
		BindDDL(ddlAcadYear, dsAcadYear, "Description", "Id");
		ddlAcadYear.Items.Insert(0, "Select");
		ddlAcadYear.SelectedIndex = 0;


	}

	private void BindDDL(DropDownList ddl, DataSet ds, string txtField, string valField)
	{
		ddl.DataSource = ds;
		ddl.DataTextField = txtField;
		ddl.DataValueField = valField;
		ddl.DataBind();
	}

	private void ControlVisibility(string Mode)
	{
		if (Mode == "Search") {
			DivResultPanel.Visible = false;
			DivSearchPanel.Visible = true;
			BtnShowSearchPanel.Visible = false;


		} else if (Mode == "Result") {
			DivResultPanel.Visible = true;
			DivSearchPanel.Visible = false;
			BtnShowSearchPanel.Visible = true;


		}
		Clear_Error_Success_Box();
	}

	//Protected Sub BtnCloseAdd_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles BtnCloseAdd.Click
	//    ControlVisibility("Result")
	//    Clear_AddPanel()
	//End Sub

	//Private Sub Clear_AddPanel()
	//    lblTestPKey_Edit.Text = ""
	//    dlGridDisplay_StudAttendance.DataSource = Nothing
	//    dlGridDisplay_StudAttendance.DataBind()

	//    lblSummary_BatchStrength.Text = ""
	//    lblSummary_ExemptCount.Text = ""
	//    lblSummary_PresentCount.Text = ""
	//    lblSummary_PresentPercent.Text = ""
	//    lblSummary_AbsentCount.Text = ""
	//    lblSummary_AbsentPercent.Text = ""
	//    lblSummary_NMCount.Text = ""

	//    dlGridStudent.DataSource = Nothing
	//    dlGridStudent.DataBind()
	//End Sub

	protected void ddlDivision_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		FillDDL_Standard();
		FillDDL_Search_Centre();
		Clear_Error_Success_Box();
	}

	private void FillDDL_Search_Centre()
	{
		Label lblHeader_Company_Code = default(Label);
		lblHeader_Company_Code = (Label)Master.FindControl("lblHeader_Company_Code");

		Label lblHeader_User_Code = default(Label);
		lblHeader_User_Code = (Label)Master.FindControl("lblHeader_User_Code");

		Label lblHeader_DBName = default(Label);
		lblHeader_DBName = (Label)Master.FindControl("lblHeader_DBName");

		string Div_Code = null;
		Div_Code = ddlDivision.SelectedValue;

		DataSet dsCentre = ProductController.GetAllActiveUser_Company_Division_Zone_Center(lblHeader_User_Code.Text, lblHeader_Company_Code.Text, Div_Code, "", "5", lblHeader_DBName.Text);

		BindDDL(ddlCentre, dsCentre, "Center_Name", "Center_Code");
		ddlCentre.Items.Insert(0, "Select");
		ddlCentre.SelectedIndex = 0;
	}

	private void FillDDL_Standard()
	{
		ddlStudentName.Items.Clear();
		ddlStandard.Items.Clear();
		ddlBatch.Items.Clear();
		txtRollNo.Text = "";

		string Div_Code = null;
		Div_Code = ddlDivision.SelectedValue;

		string YearName = null;
		YearName = ddlAcadYear.SelectedItem.ToString;

		DataSet dsStandard = ProductController.GetAllActive_Standard_ForYear(Div_Code, YearName);
		BindDDL(ddlStandard, dsStandard, "Standard_Name", "Standard_Code");
		ddlStandard.Items.Insert(0, "Select");
		ddlStandard.SelectedIndex = 0;
	}

	protected void ddlAcadYear_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		FillDDL_Standard();
		Clear_Error_Success_Box();
	}

	private void BindListBox(ListBox ddl, DataSet ds, string txtField, string valField)
	{
		ddl.DataSource = ds;
		ddl.DataTextField = txtField;
		ddl.DataValueField = valField;
		ddl.DataBind();
	}

	private void Clear_Error_Success_Box()
	{
		Msg_Error.Visible = false;
		Msg_Success.Visible = false;
		lblSuccess.Text = "";
		lblerror.Text = "";
		UpdatePanelMsgBox.update();
	}

	private void Show_Error_Success_Box(string BoxType, string Error_Code)
	{
		if (BoxType == "E") {
			Msg_Error.Visible = true;
			Msg_Success.Visible = false;
			lblerror.Text = ProductController.Raise_Error(Error_Code);
			UpdatePanelMsgBox.update();
		} else {
			Msg_Success.Visible = true;
			Msg_Error.Visible = false;
			lblSuccess.Text = ProductController.Raise_Error(Error_Code);
			UpdatePanelMsgBox.update();
		}
	}



	protected void ddlStandard_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		FillDDL_Batch();
		FillDDL_TestName();
		Clear_Error_Success_Box();
	}

	private void FillDDL_Batch()
	{
		ddlStudentName.Items.Clear();
		ddlBatch.Items.Clear();
		txtRollNo.Text = "";

		string Div_Code = null;
		Div_Code = ddlDivision.SelectedValue;

		string YearName = null;
		YearName = ddlAcadYear.SelectedItem.ToString;

		string StandardCode = null;
		StandardCode = ddlStandard.SelectedValue;

		string CentreCode = null;
		CentreCode = ddlCentre.SelectedValue;

		DataSet dsBatch = ProductController.GetAllActive_Batch_ForStandard(Div_Code, YearName, StandardCode, CentreCode);
		BindListBox(ddlBatch, dsBatch, "Batch_Name", "Batch_Code");


	}

	protected void BtnShowSearchPanel_Click(object sender, System.EventArgs e)
	{
		ControlVisibility("Search");
		//Clear_AddPanel()
	}

	//Private Sub FillAttendanceType()
	//    Dim dsAttendanceType As DataSet = ProductController.GetAllTestAttendanceActionType()
	//    BindDDL(ddlAttendanceType, dsAttendanceType, "Action_Name", "Action_Id")
	//    ddlAttendanceType.Items.Insert(0, "[ All ]")
	//    ddlAttendanceType.SelectedIndex = 0
	//End Sub

	//Private Sub FillEntityType()
	//    Dim Action_Id As String
	//    Action_Id = ddlAttendanceType.SelectedValue

	//    Dim Flag As Integer
	//    If ddlAttendanceType.SelectedIndex = 0 Then
	//        Flag = 2
	//    Else
	//        Flag = 1
	//    End If

	//    Dim dsEntityType As DataSet = ProductController.GetAllTestAttendanceEntityType(Action_Id, Flag)
	//    BindDDL(ddlEntityType, dsEntityType, "Entity_Name", "Entity_Id")
	//    ddlEntityType.Items.Insert(0, "Select")

	//    If ddlEntityType.Items.Count = 2 Then
	//        ddlEntityType.SelectedIndex = 1
	//    Else
	//        ddlEntityType.SelectedIndex = 0
	//    End If

	//End Sub

	//Protected Sub btnSearchAttendance_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnSearchAttendance.Click
	//    Clear_Error_Success_Box()

	//    'Validation
	//    If ddlEntityType.SelectedIndex = 0 Then
	//        Show_Error_Success_Box("E", "0021")
	//        ddlEntityType.Focus()
	//        Exit Sub
	//    End If

	//    DivResultPanelLevel2.Visible = True

	//    Dim TestPKey As String
	//    TestPKey = lblTestPKey_Edit.Text

	//    Dim ActionFlag As Integer

	//    If ddlEntityType.SelectedValue = "001" Then

	//        If ddlAttendanceType.SelectedValue = "001" Then
	//            ActionFlag = 1
	//        ElseIf ddlAttendanceType.SelectedValue = "002" Then
	//            ActionFlag = 2
	//        ElseIf ddlAttendanceType.SelectedValue = "003" Then
	//            ActionFlag = 3
	//        Else
	//            ActionFlag = 0
	//        End If

	//        Dim dsStudent As DataSet = ProductController.GetStudent_ForTest_ByTestPKey(TestPKey, ActionFlag)
	//        dlGridDisplay_StudAttendance.DataSource = dsStudent
	//        dlGridDisplay_StudAttendance.DataBind()

	//        If dsStudent.Tables(1).Rows.Count > 0 Then
	//            Dim ActualBatchStrength As Long
	//            ActualBatchStrength = dsStudent.Tables(1).Rows(0)("BatchStrength") - dsStudent.Tables(1).Rows(0)("ExemptCount")

	//            Dim PresentPercent As Single
	//            If ActualBatchStrength <> 0 Then
	//                PresentPercent = Math.Round(100 * dsStudent.Tables(1).Rows(0)("PresentCount") / ActualBatchStrength, 1)
	//            Else
	//                PresentPercent = 0
	//            End If

	//            Dim AbsentPercent As Single
	//            If ActualBatchStrength <> 0 Then
	//                AbsentPercent = Math.Round(100 * dsStudent.Tables(1).Rows(0)("AbsentCount") / ActualBatchStrength, 1)
	//            Else
	//                AbsentPercent = 0
	//            End If

	//            lblSummary_BatchStrength.Text = dsStudent.Tables(1).Rows(0)("BatchStrength")
	//            lblSummary_ExemptCount.Text = dsStudent.Tables(1).Rows(0)("ExemptCount")
	//            lblSummary_PresentCount.Text = dsStudent.Tables(1).Rows(0)("PresentCount")
	//            lblSummary_PresentPercent.Text = "[ " + PresentPercent.ToString + " %]"
	//            lblSummary_AbsentCount.Text = dsStudent.Tables(1).Rows(0)("AbsentCount")
	//            lblSummary_AbsentPercent.Text = "[ " + AbsentPercent.ToString + " %]"
	//            lblSummary_NMCount.Text = dsStudent.Tables(1).Rows(0)("NotMarkedCount")
	//        End If

	//        dlGridDisplay_StudAttendance.Visible = True
	//    Else
	//        dlGridDisplay_StudAttendance.Visible = False
	//    End If

	//    UpdatePanel_StudAttendance_Result.Update()
	//End Sub

	//Protected Sub ddlAttendanceType_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ddlAttendanceType.SelectedIndexChanged
	//    If ddlAttendanceType.SelectedIndex = 0 Or ddlEntityType.SelectedIndex = 0 Then
	//        btnAddAttendance.Visible = False
	//    Else
	//        btnAddAttendance.Visible = True
	//    End If
	//    FillEntityType()
	//End Sub

	//Protected Sub ddlEntityType_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ddlEntityType.SelectedIndexChanged
	//    If ddlAttendanceType.SelectedIndex = 0 Or ddlEntityType.SelectedIndex = 0 Then
	//        btnAddAttendance.Visible = False
	//    Else
	//        btnAddAttendance.Visible = True
	//    End If
	//End Sub

	//Protected Sub btnAddAttendance_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnAddAttendance.Click
	//    FillGridStudent()
	//    ScriptManager.RegisterStartupScript(Me, Me.[GetType](), "Pop", "openModalStudAttend();", True)
	//End Sub

	//Private Sub FillGridStudent()
	//    Dim TestPKey As String
	//    TestPKey = lblTestPKey_Edit.Text

	//    Dim ActionFlag As Integer

	//    If ddlAttendanceType.SelectedValue = "001" Then
	//        lblStudAttend_Header.Text = "Mark Student Exemption"
	//        ActionFlag = 1
	//        lblStudAttend_Action.Text = "E"
	//    ElseIf ddlAttendanceType.SelectedValue = "002" Then
	//        lblStudAttend_Header.Text = "Mark Student Absent"
	//        ActionFlag = 2
	//        lblStudAttend_Action.Text = "A"
	//    ElseIf ddlAttendanceType.SelectedValue = "003" Then
	//        lblStudAttend_Header.Text = "Mark Student Present"
	//        ActionFlag = 3
	//        lblStudAttend_Action.Text = "P"
	//    End If

	//    Dim dsStudent As DataSet = ProductController.GetStudent_ForTest_ByTestPKey(TestPKey, ActionFlag)
	//    dlGridStudent.DataSource = dsStudent
	//    dlGridStudent.DataBind()
	//    UpdatePanel_StudAttendance.Update()

	//End Sub

	//Protected Sub btnStudAttend_Save_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnStudAttend_Save.Click
	//    Dim TestPKey As String
	//    TestPKey = lblTestPKey_Edit.Text

	//    Dim StudCnt As Integer
	//    Dim SBEntryCode As String = ""
	//    Dim NotSel_SBEntryCode As String = ""

	//    For Each dtlItem As DataListItem In dlGridStudent.Items
	//        Dim chkStudent As CheckBox = DirectCast(dtlItem.FindControl("chkStudent"), CheckBox)
	//        Dim lblSBEntryCode As Label = DirectCast(dtlItem.FindControl("lblSBEntryCode"), Label)
	//        If chkStudent.Checked = True Then
	//            StudCnt = StudCnt + 1
	//            SBEntryCode = SBEntryCode & lblSBEntryCode.Text & ","
	//        Else
	//            NotSel_SBEntryCode = NotSel_SBEntryCode & lblSBEntryCode.Text & ","
	//        End If
	//    Next
	//    If Right(SBEntryCode, 1) = "," Then SBEntryCode = Left(SBEntryCode, Len(SBEntryCode) - 1)
	//    If Right(NotSel_SBEntryCode, 1) = "," Then NotSel_SBEntryCode = Left(NotSel_SBEntryCode, Len(NotSel_SBEntryCode) - 1)

	//    Dim lblHeader_User_Code As Label
	//    lblHeader_User_Code = CType(Master.FindControl("lblHeader_User_Code"), Label)

	//    Dim CreatedBy As String
	//    CreatedBy = lblHeader_User_Code.Text

	//    Dim ActionFlag As String
	//    ActionFlag = lblStudAttend_Action.Text

	//    Dim ResultId As Integer
	//    'Mark exemption/absent/present for those students who are selected
	//    ResultId = ProductController.Insert_StudentTestAttendace(TestPKey, ActionFlag, SBEntryCode, CreatedBy)

	//    'Mark NA for those students who are not selected
	//    ResultId = ProductController.Insert_StudentTestAttendace(TestPKey, "N", NotSel_SBEntryCode, CreatedBy)

	//    'Close the Add Panel and go to Search Grid
	//    If ResultId = 1 Then
	//        btnSearchAttendance_Click(sender, e)
	//        btnStudAttend_Close_Click(sender, e)
	//    End If
	//End Sub

	//Protected Sub btnStudAttend_Close_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnStudAttend_Close.Click
	//    'Close the modal box
	//End Sub

	protected void ddlTestType_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		FillDDL_TestName();
		Clear_Error_Success_Box();
	}

	protected void ddlTestCategory_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		FillDDL_TestName();
		Clear_Error_Success_Box();
	}

	protected void ddlBatch_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		FillDDL_TestName();
		ddlStudentName.Items.Clear();
		txtRollNo.Text = "";
		Clear_Error_Success_Box();
	}

	protected void ddlCentre_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		FillDDL_Batch();
		FillDDL_TestName();
		Clear_Error_Success_Box();
	}

	protected void btnStudentName_Click(object sender, System.EventArgs e)
	{
		ddlStudentName.Items.Clear();
		ddlStudentRollNo.Items.Clear();
		txtRollNo.Text = "";

		string Div_Code = null;
		Div_Code = ddlDivision.SelectedValue;

		string YearName = null;
		YearName = ddlAcadYear.SelectedItem.ToString;

		string Centre_Code = null;
		Centre_Code = ddlCentre.SelectedValue;

		string BatchCode = "";
		int BatchCnt = 0;
		int BatchSelCnt = 0;
		for (BatchCnt = 0; BatchCnt <= ddlBatch.Items.Count - 1; BatchCnt++) {
			if (ddlBatch.Items(BatchCnt).Selected == true) {
				BatchSelCnt = BatchSelCnt + 1;
			}
		}

		string StandardCode = null;
		StandardCode = ddlStandard.SelectedValue;

		if (BatchSelCnt == 0) {
			//When all is selected
			for (BatchCnt = 0; BatchCnt <= ddlBatch.Items.Count - 1; BatchCnt++) {
				BatchCode = BatchCode + ddlBatch.Items(BatchCnt).Value + ",";
			}
			if (Strings.Right(BatchCode, 1) == ",")
				BatchCode = Strings.Left(BatchCode, Strings.Len(BatchCode) - 1);
		} else {
			for (BatchCnt = 0; BatchCnt <= ddlBatch.Items.Count - 1; BatchCnt++) {
				if (ddlBatch.Items(BatchCnt).Selected == true) {
					BatchCode = BatchCode + ddlBatch.Items(BatchCnt).Value + ",";
				}
			}
			if (Strings.Right(BatchCode, 1) == ",")
				BatchCode = Strings.Left(BatchCode, Strings.Len(BatchCode) - 1);
		}

		DataSet dsStudent = ProductController.GetStudent_ForTest_ByDivision_Centre_Standard(Div_Code, YearName, Centre_Code, StandardCode, BatchCode, "CDB", 1);
		BindDDL(ddlStudentName, dsStudent, "StudentName", "SBEntryCode");
		ddlStudentName.Items.Insert(0, "Select");
		ddlStudentName.SelectedIndex = 0;

		BindDDL(ddlStudentRollNo, dsStudent, "SBEntryCode", "RollNo");
		ddlStudentRollNo.Items.Insert(0, "Select");
		ddlStudentRollNo.SelectedIndex = 0;

		BindDDL(ddlStudentEMailId, dsStudent, "SBEntryCode", "ParentsEMailId");
		ddlStudentEMailId.Items.Insert(0, "Select");
		ddlStudentEMailId.SelectedIndex = 0;



		Clear_Error_Success_Box();
	}

	protected void ddlStudentName_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		txtRollNo.Text = ddlStudentRollNo.Items(ddlStudentName.SelectedIndex).Value;
		Clear_Error_Success_Box();
	}

	protected void btnPrint_Click(object sender, System.EventArgs e)
	{
		FillGridStudent();
		btnStudSelect_Mail.Visible = false;
		btnStudSelect_Print.Visible = true;
		ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "openModalStudSelection();", true);
	}

	private void FillGridStudent()
	{
		dlGridStudSelect.DataSource = null;
		dlGridStudSelect.DataBind();

		DataTable dt = new DataTable();
		dt.Columns.AddRange(new DataColumn[] {
			new DataColumn("RollNo", typeof(string)),
			new DataColumn("StudentName", typeof(string)),
			new DataColumn("StudentSelFlag", typeof(int)),
			new DataColumn("SBEntryCode", typeof(string)),
			new DataColumn("ParentEMailId", typeof(string))
		});

		int Cnt = 0;
		int StudentSelFlag = 0;
		for (Cnt = 1; Cnt <= ddlStudentName.Items.Count - 1; Cnt++) {
			if (ddlStudentName.Items(Cnt).Value == ddlStudentName.SelectedValue.ToString) {
				StudentSelFlag = 1;
			} else {
				StudentSelFlag = 0;
			}
			dt.Rows.Add(ddlStudentRollNo.Items(Cnt).Value, ddlStudentName.Items(Cnt).Text, 0, ddlStudentName.Items(Cnt).Value, ddlStudentEMailId.Items(Cnt).Value);
		}

		dlGridStudSelect.DataSource = dt;
		dlGridStudSelect.DataBind();

	}

	private void PrintStudentResult(object sender, System.EventArgs e)
	{
		//Dim Path As String = "Report_Marksheet_Print.aspx?Test_Id=" & Replace(Test_Id, "%", "%25") & "&SBEntryCode=" & SBEntryCode
		//ScriptManager.RegisterStartupScript(Me, Me.GetType, "key", "open('" + Path + "');", True)

		string Test_Id = null;
		Test_Id = lblTestID_Result.Text;


		// Create a Document object
		dynamic document = new Document(PageSize.A4, 50, 50, 25, 25);

		// Create a new PdfWriter object, specifying the output stream
		dynamic output = new MemoryStream();
		dynamic writer = PdfWriter.GetInstance(document, output);


		dynamic TitleFont = FontFactory.GetFont("Arial", 16, Font.BOLD);
		dynamic subTitleFont = FontFactory.GetFont("Arial", 14, Font.BOLD);
		dynamic boldTableFont = FontFactory.GetFont("Arial", 12, Font.BOLD);
		dynamic endingMessageFont = FontFactory.GetFont("Arial", 10, Font.ITALIC);
		dynamic bodyFont = FontFactory.GetFont("Arial", 12, Font.NORMAL);


		// Open the Document for writing
		document.Open();

		//For each item selected in Grid run the following things
		foreach (DataListItem dtlItem in dlGridStudSelect.Items) {
			CheckBox chkStudent = (CheckBox)dtlItem.FindControl("chkStudent");
			Label lblSBEntryCode = (Label)dtlItem.FindControl("lblSBEntryCode");
			Label lblStudentRollNo = (Label)dtlItem.FindControl("lblStudentRollNo");
			Label lblStudentName = (Label)dtlItem.FindControl("lblStudentName");

			if (chkStudent.Checked == true) {
				//For MCQ Type test
				if (ddlTestCategory.SelectedValue == "002") {
					DataSet dsGrid = ProductController.Report_Test_MCQ_Test_Subject_Student_Rank(Test_Id, lblSBEntryCode.Text, 1);
					dlPrint_Summary.DataSource = dsGrid.Tables(0);
					dlPrint_Summary.DataBind();

					dlPrint_Answering.DataSource = dsGrid.Tables(1);
					dlPrint_Answering.DataBind();

					dlPrint_Topper.DataSource = dsGrid.Tables(2);
					dlPrint_Topper.DataBind();
				} else {
					DataSet dsGrid = ProductController.Report_Test_NonMCQ_Test_Subject_Student_Rank(Test_Id, lblSBEntryCode.Text, 1);
					dlPrint_Summary.DataSource = dsGrid.Tables(0);
					dlPrint_Summary.DataBind();

					dlPrint_Answering.DataSource = null;
					dlPrint_Answering.DataBind();

					dlPrint_Topper.DataSource = dsGrid.Tables(1);
					dlPrint_Topper.DataBind();
				}

				lblPrint_Center.Text = ddlCentre.SelectedItem.ToString;
				lblPrint_StudentName.Text = lblStudentName.Text;
				lblPrint_RollNo.Text = lblStudentRollNo.Text;

				float YPos = 0;
				YPos = 780;

				dynamic logo = iTextSharp.text.Image.GetInstance(Server.MapPath("~/Images/LEPL-LOGO.jpg"));
				logo.SetAbsolutePosition(25, YPos);
				logo.ScalePercent(60);
				document.Add(logo);

				BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

				PdfContentByte cb = writer.DirectContent;
				cb.BeginText();
				cb.SetTextMatrix(380, YPos + 20);
				cb.SetFontAndSize(bf, 16);

				cb.SetLineWidth(0.5f);
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE);

				cb.ShowText("STATEMENT OF MARKS");
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL);
				YPos = YPos - 0;

				cb.SetColorStroke(new CMYKColor(1f, 1f, 1f, 1f));
				cb.SetLineWidth(0.5f);
				cb.MoveTo(20, YPos);
				cb.LineTo(570, YPos);
				cb.Stroke();

				YPos = YPos - 15;

				cb.SetTextMatrix(25, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Name of Student : ");

				cb.SetTextMatrix(120, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE);
				cb.ShowText(lblPrint_StudentName.Text);

				cb.SetTextMatrix(325, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL);
				cb.ShowText("Roll No : ");

				cb.SetTextMatrix(375, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE);
				cb.ShowText(lblPrint_RollNo.Text);

				cb.SetTextMatrix(425, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL);
				cb.ShowText("Centre : ");

				cb.SetTextMatrix(475, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE);
				cb.ShowText(lblPrint_Center.Text);
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL);

				float TableStartYPos = 0;
				cb.MoveTo(20, YPos - 10);
				cb.LineTo(570, YPos - 10);
				cb.Stroke();
				TableStartYPos = YPos - 10;

				YPos = YPos - 25;

				float Col0Left = 0;
				float Col1Left = 0;
				float Col2Left = 0;
				float Col3Left = 0;
				float Col4Left = 0;
				float Col5Left = 0;
				float Col6Left = 0;
				float Col7Left = 0;
				float Col8Left = 0;
				Col0Left = 25;
				Col1Left = Col0Left + 65;
				Col2Left = Col1Left + 100;
				Col3Left = Col2Left + 150;
				Col4Left = Col3Left + 50;
				Col5Left = Col4Left + 50;
				Col6Left = Col5Left + 60;
				Col7Left = 570;
				//Col6Left + 60

				cb.SetTextMatrix(Col0Left, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Test Date");

				cb.SetTextMatrix(Col1Left, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Test Name");

				cb.SetTextMatrix(Col2Left, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Subject");

				cb.SetTextMatrix((Col3Left + ((Col4Left - Col3Left) / 2) - (cb.GetEffectiveStringWidth("Score", false) / 2)), YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Score");

				cb.SetTextMatrix((Col4Left + ((Col5Left - Col4Left) / 2) - (cb.GetEffectiveStringWidth("Out Of", false) / 2)), YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Out Of");

				cb.SetTextMatrix((Col5Left + ((Col6Left - Col5Left) / 2) - (cb.GetEffectiveStringWidth("Centre Rank", false) / 2)), YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Centre Rank");

				cb.SetTextMatrix((Col6Left + ((Col7Left - Col6Left) / 2) - (cb.GetEffectiveStringWidth("Overall Rank", false) / 2)), YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Overall Rank");

				cb.MoveTo(20, YPos - 5);
				cb.LineTo(570, YPos - 5);
				cb.Stroke();

				foreach (DataListItem dtlItem1 in dlPrint_Summary.Items) {
					Label lblDLTestDate = (Label)dtlItem1.FindControl("lblDLTestDate");
					Label lblDLTestName = (Label)dtlItem1.FindControl("lblDLTestName");
					Label lblDLSubject = (Label)dtlItem1.FindControl("lblDLSubject");
					Label lblDLMarksObtd = (Label)dtlItem1.FindControl("lblDLMarksObtd");
					Label lblDLMarksOutOf = (Label)dtlItem1.FindControl("lblDLMarksOutOf");
					Label lblDLPercent = (Label)dtlItem1.FindControl("lblDLPercent");
					Label lblDLCentreRank = (Label)dtlItem1.FindControl("lblDLCentreRank");
					Label lblDLOvarllRank = (Label)dtlItem1.FindControl("lblDLOvarllRank");

					if (chkOverallRankFlag.Checked == false) {
						lblDLOvarllRank.Text = "-";
					}

					YPos = YPos - 20;
					cb.SetTextMatrix(Col0Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText(lblDLTestDate.Text);

					cb.SetTextMatrix(Col1Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText(lblDLTestName.Text);

					cb.SetTextMatrix(Col2Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText(lblDLSubject.Text);

					cb.SetTextMatrix((Col3Left + ((Col4Left - Col3Left) / 2) - (cb.GetEffectiveStringWidth(lblDLMarksObtd.Text, false) / 2)), YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText(lblDLMarksObtd.Text);

					cb.SetTextMatrix((Col4Left + ((Col5Left - Col4Left) / 2) - (cb.GetEffectiveStringWidth(lblDLMarksOutOf.Text, false) / 2)), YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText(lblDLMarksOutOf.Text);

					cb.SetTextMatrix((Col5Left + ((Col6Left - Col5Left) / 2) - (cb.GetEffectiveStringWidth(lblDLCentreRank.Text, false) / 2)), YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText(lblDLCentreRank.Text);

					cb.SetTextMatrix((Col6Left + ((Col7Left - Col6Left) / 2) - (cb.GetEffectiveStringWidth(lblDLOvarllRank.Text, false) / 2)), YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText(lblDLOvarllRank.Text);

					cb.MoveTo(20, YPos - 5);
					cb.LineTo(570, YPos - 5);
					cb.Stroke();
				}

				cb.MoveTo(20, TableStartYPos);
				cb.LineTo(20, YPos - 5);
				cb.Stroke();

				cb.MoveTo(Col1Left - 5, TableStartYPos);
				cb.LineTo(Col1Left - 5, YPos - 5);
				cb.Stroke();

				cb.MoveTo(Col2Left - 5, TableStartYPos);
				cb.LineTo(Col2Left - 5, YPos - 5);
				cb.Stroke();

				cb.MoveTo(Col3Left, TableStartYPos);
				cb.LineTo(Col3Left, YPos - 5);
				cb.Stroke();

				cb.MoveTo(Col4Left, TableStartYPos);
				cb.LineTo(Col4Left, YPos - 5);
				cb.Stroke();

				cb.MoveTo(Col5Left, TableStartYPos);
				cb.LineTo(Col5Left, YPos - 5);
				cb.Stroke();

				cb.MoveTo(Col6Left, TableStartYPos);
				cb.LineTo(Col6Left, YPos - 5);
				cb.Stroke();

				cb.MoveTo(Col7Left, TableStartYPos);
				cb.LineTo(Col7Left, YPos - 5);
				cb.Stroke();


				YPos = YPos - 25;

				//For MCQ Type test
				if (ddlTestCategory.SelectedValue == "002") {
					cb.SetTextMatrix(25, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE);
					cb.ShowText("Details of Answering");
					cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL);

					cb.MoveTo(20, YPos - 10);
					cb.LineTo(570, YPos - 10);
					cb.Stroke();
					TableStartYPos = YPos - 10;

					YPos = YPos - 25;

					Col0Left = 25;
					Col1Left = Col0Left + 65;
					Col2Left = Col1Left + 70;
					Col3Left = Col2Left + 65;
					Col4Left = Col3Left + 40;
					Col5Left = Col4Left + 100;
					Col6Left = Col5Left + 100;
					Col7Left = 570;
					//Col6Left + 60

					cb.SetTextMatrix(Col0Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Test Name");

					cb.SetTextMatrix(Col1Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Subject");

					cb.SetTextMatrix(Col2Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Status");

					cb.SetTextMatrix((Col3Left + ((Col4Left - Col3Left) / 2) - (cb.GetEffectiveStringWidth("Count", false) / 2)), YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Count");

					cb.SetTextMatrix(Col4Left + 5, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Que No");

					//cb.SetTextMatrix((Col5Left + ((Col6Left - Col5Left) / 2) - (cb.GetEffectiveStringWidth("Que No - Moderate", False) / 2)), YPos)
					//cb.SetFontAndSize(bf, 10)
					//cb.ShowText("Que No - Moderate")

					//cb.SetTextMatrix((Col6Left + ((Col7Left - Col6Left) / 2) - (cb.GetEffectiveStringWidth("Que No - Difficult", False) / 2)), YPos)
					//cb.SetFontAndSize(bf, 10)
					//cb.ShowText("Que No - Difficult")

					cb.MoveTo(20, YPos - 5);
					cb.LineTo(570, YPos - 5);
					cb.Stroke();

					foreach (DataListItem dtlItem1 in dlPrint_Answering.Items) {
						Label lblDLTestName = (Label)dtlItem1.FindControl("lblDLTestName");
						Label lblDLSubjectName = (Label)dtlItem1.FindControl("lblDLSubjectName");
						Label lblDLResultStatus = (Label)dtlItem1.FindControl("lblDLResultStatus");
						Label lblDLResultCount = (Label)dtlItem1.FindControl("lblDLResultCount");
						Label lblDLEasy = (Label)dtlItem1.FindControl("lblDLEasy");
						Label lblDLModerate = (Label)dtlItem1.FindControl("lblDLModerate");
						Label lblDLDifficult = (Label)dtlItem1.FindControl("lblDLDifficult");

						YPos = YPos - 20;
						cb.SetTextMatrix(Col0Left, YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(lblDLTestName.Text);

						cb.SetTextMatrix(Col1Left, YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(Strings.Left(lblDLSubjectName.Text, 10));

						cb.SetTextMatrix(Col2Left, YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(lblDLResultStatus.Text);

						cb.SetTextMatrix((Col3Left + ((Col4Left - Col3Left) / 2) - (cb.GetEffectiveStringWidth(lblDLResultCount.Text, false) / 2)), YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(lblDLResultCount.Text);

						//cb.SetTextMatrix(Col4Left + 5, YPos)
						//cb.SetFontAndSize(bf, 10)
						//cb.ShowText(lblDLEasy.Text)

						float Yp1PDF = 0;
						float ActPos = 0;
						string TotalMatter = null;
						string DummyMatter = null;
						string PrintMatter = null;
						dynamic SplitMatter = null;

						Yp1PDF = YPos;
						ActPos = YPos;
						TotalMatter = lblDLEasy.Text + lblDLModerate.Text + lblDLDifficult.Text;

						int Cnt = 0;
						Cnt = 0;
						if (!string.IsNullOrEmpty(Strings.Trim(TotalMatter))) {
							Yp1PDF = Yp1PDF + 20;

							DummyMatter = TotalMatter;
							SplitMatter = Strings.Split(TotalMatter, Constants.vbCrLf);
							for (EntCnt = 0; EntCnt <= Cnt; EntCnt++) {
								TotalMatter = SplitMatter(EntCnt);
								Again1PDF:
								Yp1PDF = Yp1PDF - 20;
								PrintMatter = "";
								for (ChrCnt = 1; ChrCnt <= Strings.Len(TotalMatter); ChrCnt++) {
									if (string.IsNullOrEmpty(Strings.Trim(TotalMatter))) {
										PrintMatter = "";
									} else {
										PrintMatter = Strings.Left(TotalMatter, ChrCnt);
									}
									if (cb.GetEffectiveStringWidth(PrintMatter, true) >= (Col7Left - Col4Left - 10)) {
										//Search for last blank space
										ChrCnt = Strings.InStrRev(PrintMatter, ",");
										PrintMatter = Strings.Left(TotalMatter, ChrCnt);

										cb.SetTextMatrix(Col4Left + 5, Yp1PDF);
										cb.SetFontAndSize(bf, 10);
										cb.ShowText(PrintMatter);

										TotalMatter = Strings.Right(TotalMatter, Strings.Len(TotalMatter) - ChrCnt);
										goto Again1PDF;
									}
								}

								cb.SetTextMatrix(Col4Left + 5, Yp1PDF);
								cb.SetFontAndSize(bf, 10);
								cb.ShowText(PrintMatter);
							}
						}

						YPos = Yp1PDF;

						//cb.SetTextMatrix((Col5Left + ((Col6Left - Col5Left) / 2) - (cb.GetEffectiveStringWidth(lblDLModerate.Text, False) / 2)), YPos)
						//cb.SetFontAndSize(bf, 10)
						//cb.ShowText(lblDLModerate.Text)

						//cb.SetTextMatrix((Col6Left + ((Col7Left - Col6Left) / 2) - (cb.GetEffectiveStringWidth(lblDLDifficult.Text, False) / 2)), YPos)
						//cb.SetFontAndSize(bf, 10)
						//cb.ShowText(lblDLDifficult.Text)

						cb.MoveTo(20, YPos - 5);
						cb.LineTo(570, YPos - 5);
						cb.Stroke();
					}

					cb.MoveTo(20, TableStartYPos);
					cb.LineTo(20, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col1Left - 5, TableStartYPos);
					cb.LineTo(Col1Left - 5, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col2Left - 5, TableStartYPos);
					cb.LineTo(Col2Left - 5, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col3Left, TableStartYPos);
					cb.LineTo(Col3Left, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col4Left, TableStartYPos);
					cb.LineTo(Col4Left, YPos - 5);
					cb.Stroke();

					//cb.MoveTo(Col5Left, TableStartYPos)
					//cb.LineTo(Col5Left, YPos - 5)
					//cb.Stroke()

					//cb.MoveTo(Col6Left, TableStartYPos)
					//cb.LineTo(Col6Left, YPos - 5)
					//cb.Stroke()

					cb.MoveTo(Col7Left, TableStartYPos);
					cb.LineTo(Col7Left, YPos - 5);
					cb.Stroke();
				}

				if (chkOverallRankFlag.Checked == true) {


					YPos = YPos - 25;

					cb.SetTextMatrix(25, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE);
					cb.ShowText("Overall Toppers");
					cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL);

					cb.MoveTo(20, YPos - 10);
					cb.LineTo(570, YPos - 10);
					cb.Stroke();
					TableStartYPos = YPos - 10;

					YPos = YPos - 25;

					Col0Left = 25;
					Col1Left = Col0Left + 65;
					Col2Left = Col1Left + 70;
					Col3Left = Col2Left + 205;
					Col4Left = Col3Left + 150;
					Col5Left = 570;
					//Col6Left + 60

					cb.SetTextMatrix(Col0Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Test Name");

					cb.SetTextMatrix(Col1Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Subject");

					cb.SetTextMatrix(Col2Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Name of Student");

					cb.SetTextMatrix(Col3Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Centre");

					cb.SetTextMatrix((Col4Left + ((Col5Left - Col4Left) / 2) - (cb.GetEffectiveStringWidth("Score", false) / 2)), YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Score");

					cb.MoveTo(20, YPos - 5);
					cb.LineTo(570, YPos - 5);
					cb.Stroke();

					foreach (DataListItem dtlItem1 in dlPrint_Topper.Items) {
						Label lblDLTestName = (Label)dtlItem1.FindControl("lblDLTestName");
						Label lblDLSubject = (Label)dtlItem1.FindControl("lblDLSubject");
						Label lblDLStudentName = (Label)dtlItem1.FindControl("lblDLStudentName");
						Label lblDLCentre = (Label)dtlItem1.FindControl("lblDLCentre");
						Label lblDLScore = (Label)dtlItem1.FindControl("lblDLScore");

						YPos = YPos - 20;
						cb.SetTextMatrix(Col0Left, YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(lblDLTestName.Text);

						cb.SetTextMatrix(Col1Left, YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(Strings.Left(lblDLSubject.Text, 10));

						cb.SetTextMatrix(Col2Left, YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(lblDLStudentName.Text);

						cb.SetTextMatrix(Col3Left, YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(lblDLCentre.Text);

						cb.SetTextMatrix((Col4Left + ((Col5Left - Col4Left) / 2) - (cb.GetEffectiveStringWidth(lblDLScore.Text, false) / 2)), YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(lblDLScore.Text);

						cb.MoveTo(20, YPos - 5);
						cb.LineTo(570, YPos - 5);
						cb.Stroke();
					}

					cb.MoveTo(20, TableStartYPos);
					cb.LineTo(20, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col1Left - 5, TableStartYPos);
					cb.LineTo(Col1Left - 5, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col2Left - 5, TableStartYPos);
					cb.LineTo(Col2Left - 5, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col3Left - 5, TableStartYPos);
					cb.LineTo(Col3Left - 5, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col4Left, TableStartYPos);
					cb.LineTo(Col4Left, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col5Left, TableStartYPos);
					cb.LineTo(Col5Left, YPos - 5);
					cb.Stroke();

				}
				YPos = YPos - 25;


				//document.Add(New Paragraph("STATEMENT OF MARKS", TitleFont))

				//Dim orderInfoTable = New PdfPTable(2)
				//orderInfoTable.HorizontalAlignment = 0
				//orderInfoTable.SpacingBefore = 10
				//orderInfoTable.SpacingAfter = 10
				//orderInfoTable.DefaultCell.Border = 1
				//orderInfoTable.SetWidths(New Integer() {1, 4})

				//orderInfoTable.AddCell(New Phrase("Order:", boldTableFont))
				//orderInfoTable.AddCell(lblPrint_RollNo.Text)
				//orderInfoTable.AddCell(New Phrase("Price:", boldTableFont))
				//'orderInfoTable.AddCell(Convert.ToDecimal(txtTotalPrice.Text).ToString("c"))
				//orderInfoTable.AddCell(lblPrint_StudentName.Text)

				//document.Add(orderInfoTable)


				cb.EndText();

				document.NewPage();
				//Create New Page for new student

			}
		}

		document.Close();

		string CurTimeFrame = null;
		CurTimeFrame = System.DateTime.Now.ToString("ddMMyyyyhhmmss");

		Response.ContentType = "application/pdf";
		Response.AddHeader("Content-Disposition", string.Format("attachment;filename=StudentMarkSheet{0}.pdf", CurTimeFrame));
		Response.BinaryWrite(output.ToArray());

		Show_Error_Success_Box("S", "PDF File generated successfully.");

		btnStudSelect_Close_Click(sender, e);
	}



	protected void btnStudSelect_Print_Click(object sender, System.EventArgs e)
	{
		PrintStudentResult(sender, e);
	}

	protected void btnStudSelect_Close_Click(object sender, System.EventArgs e)
	{
		//Do nothing
	}

	public void All_Student_ChkBox_Selected(object sender, System.EventArgs e)
	{
		//Change checked status of a hidden check box
		chkStudentAllHidden.Checked = !(chkStudentAllHidden.Checked);

		//Set checked status of hidden check box to items in grid
		foreach (DataListItem dtlItem in dlGridStudSelect.Items) {
			CheckBox chkitemck = (CheckBox)dtlItem.FindControl("chkStudent");

			chkitemck.Checked = chkStudentAllHidden.Checked;
		}

	}

	protected void btnEmail_Click(object sender, System.EventArgs e)
	{
		FillGridStudent();
		btnStudSelect_Mail.Visible = true;
		btnStudSelect_Print.Visible = false;
		ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "openModalStudSelection();", true);
	}

	protected void btnStudSelect_Mail_Click(object sender, System.EventArgs e)
	{
		MailStudentResult(sender, e);
	}

	private void MailStudentResult(object sender, System.EventArgs e)
	{
		//Dim Path As String = "Report_Marksheet_Print.aspx?Test_Id=" & Replace(Test_Id, "%", "%25") & "&SBEntryCode=" & SBEntryCode
		//ScriptManager.RegisterStartupScript(Me, Me.GetType, "key", "open('" + Path + "');", True)

		string Test_Id = null;
		Test_Id = lblTestID_Result.Text;




		// Create a Document object



		dynamic TitleFont = FontFactory.GetFont("Arial", 16, Font.BOLD);
		dynamic subTitleFont = FontFactory.GetFont("Arial", 14, Font.BOLD);
		dynamic boldTableFont = FontFactory.GetFont("Arial", 12, Font.BOLD);
		dynamic endingMessageFont = FontFactory.GetFont("Arial", 10, Font.ITALIC);
		dynamic bodyFont = FontFactory.GetFont("Arial", 12, Font.NORMAL);


		// Open the Document for writing


		//For each item selected in Grid run the following things
		foreach (DataListItem dtlItem in dlGridStudSelect.Items) {
			dynamic document = new Document(PageSize.A4, 50, 50, 25, 25);
			// Create a new PdfWriter object, specifying the output stream
			dynamic output = new MemoryStream();
			dynamic writer = PdfWriter.GetInstance(document, output);
			document.Open();

			CheckBox chkStudent = (CheckBox)dtlItem.FindControl("chkStudent");
			Label lblSBEntryCode = (Label)dtlItem.FindControl("lblSBEntryCode");
			Label lblStudentRollNo = (Label)dtlItem.FindControl("lblStudentRollNo");
			Label lblStudentName = (Label)dtlItem.FindControl("lblStudentName");
			Label lblStudentEmail = (Label)dtlItem.FindControl("lblStudentEmail");

			if (chkStudent.Checked == true & !string.IsNullOrEmpty(lblStudentEmail.Text.Trim)) {
				//For MCQ Type test
				if (ddlTestCategory.SelectedValue == "002") {
					DataSet dsGrid = ProductController.Report_Test_MCQ_Test_Subject_Student_Rank(Test_Id, lblSBEntryCode.Text, 1);
					dlPrint_Summary.DataSource = dsGrid.Tables(0);
					dlPrint_Summary.DataBind();

					dlPrint_Answering.DataSource = dsGrid.Tables(1);
					dlPrint_Answering.DataBind();

					dlPrint_Topper.DataSource = dsGrid.Tables(2);
					dlPrint_Topper.DataBind();
				} else {
					DataSet dsGrid = ProductController.Report_Test_NonMCQ_Test_Subject_Student_Rank(Test_Id, lblSBEntryCode.Text, 1);
					dlPrint_Summary.DataSource = dsGrid.Tables(0);
					dlPrint_Summary.DataBind();

					dlPrint_Answering.DataSource = null;
					dlPrint_Answering.DataBind();

					dlPrint_Topper.DataSource = dsGrid.Tables(1);
					dlPrint_Topper.DataBind();
				}

				lblPrint_Center.Text = ddlCentre.SelectedItem.ToString;
				lblPrint_StudentName.Text = lblStudentName.Text;
				lblPrint_RollNo.Text = lblStudentRollNo.Text;

				float YPos = 0;
				YPos = 780;

				dynamic logo = iTextSharp.text.Image.GetInstance(Server.MapPath("~/Images/LEPL-LOGO.jpg"));
				logo.SetAbsolutePosition(25, YPos);
				logo.ScalePercent(60);
				document.Add(logo);

				BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

				PdfContentByte cb = writer.DirectContent;
				cb.BeginText();
				cb.SetTextMatrix(380, YPos + 20);
				cb.SetFontAndSize(bf, 16);

				cb.SetLineWidth(0.5f);
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE);

				cb.ShowText("STATEMENT OF MARKS");
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL);
				YPos = YPos - 0;

				cb.SetColorStroke(new CMYKColor(1f, 1f, 1f, 1f));
				cb.SetLineWidth(0.5f);
				cb.MoveTo(20, YPos);
				cb.LineTo(570, YPos);
				cb.Stroke();

				YPos = YPos - 15;

				cb.SetTextMatrix(25, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Name of Student : ");

				cb.SetTextMatrix(120, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE);
				cb.ShowText(lblPrint_StudentName.Text);

				cb.SetTextMatrix(325, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL);
				cb.ShowText("Roll No : ");

				cb.SetTextMatrix(375, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE);
				cb.ShowText(lblPrint_RollNo.Text);

				cb.SetTextMatrix(425, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL);
				cb.ShowText("Centre : ");

				cb.SetTextMatrix(475, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE);
				cb.ShowText(lblPrint_Center.Text);
				cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL);

				float TableStartYPos = 0;
				cb.MoveTo(20, YPos - 10);
				cb.LineTo(570, YPos - 10);
				cb.Stroke();
				TableStartYPos = YPos - 10;

				YPos = YPos - 25;

				float Col0Left = 0;
				float Col1Left = 0;
				float Col2Left = 0;
				float Col3Left = 0;
				float Col4Left = 0;
				float Col5Left = 0;
				float Col6Left = 0;
				float Col7Left = 0;
				float Col8Left = 0;
				Col0Left = 25;
				Col1Left = Col0Left + 65;
				Col2Left = Col1Left + 100;
				Col3Left = Col2Left + 150;
				Col4Left = Col3Left + 50;
				Col5Left = Col4Left + 50;
				Col6Left = Col5Left + 60;
				Col7Left = 570;
				//Col6Left + 60

				cb.SetTextMatrix(Col0Left, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Test Date");

				cb.SetTextMatrix(Col1Left, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Test Name");

				cb.SetTextMatrix(Col2Left, YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Subject");

				cb.SetTextMatrix((Col3Left + ((Col4Left - Col3Left) / 2) - (cb.GetEffectiveStringWidth("Score", false) / 2)), YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Score");

				cb.SetTextMatrix((Col4Left + ((Col5Left - Col4Left) / 2) - (cb.GetEffectiveStringWidth("Out Of", false) / 2)), YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Out Of");

				cb.SetTextMatrix((Col5Left + ((Col6Left - Col5Left) / 2) - (cb.GetEffectiveStringWidth("Centre Rank", false) / 2)), YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Centre Rank");

				cb.SetTextMatrix((Col6Left + ((Col7Left - Col6Left) / 2) - (cb.GetEffectiveStringWidth("Overall Rank", false) / 2)), YPos);
				cb.SetFontAndSize(bf, 10);
				cb.ShowText("Overall Rank");

				cb.MoveTo(20, YPos - 5);
				cb.LineTo(570, YPos - 5);
				cb.Stroke();

				foreach (DataListItem dtlItem1 in dlPrint_Summary.Items) {
					Label lblDLTestDate = (Label)dtlItem1.FindControl("lblDLTestDate");
					Label lblDLTestName = (Label)dtlItem1.FindControl("lblDLTestName");
					Label lblDLSubject = (Label)dtlItem1.FindControl("lblDLSubject");
					Label lblDLMarksObtd = (Label)dtlItem1.FindControl("lblDLMarksObtd");
					Label lblDLMarksOutOf = (Label)dtlItem1.FindControl("lblDLMarksOutOf");
					Label lblDLPercent = (Label)dtlItem1.FindControl("lblDLPercent");
					Label lblDLCentreRank = (Label)dtlItem1.FindControl("lblDLCentreRank");
					Label lblDLOvarllRank = (Label)dtlItem1.FindControl("lblDLOvarllRank");

					if (chkOverallRankFlag.Checked == false) {
						lblDLOvarllRank.Text = "-";
					}

					YPos = YPos - 20;
					cb.SetTextMatrix(Col0Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText(lblDLTestDate.Text);

					cb.SetTextMatrix(Col1Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText(lblDLTestName.Text);

					cb.SetTextMatrix(Col2Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText(lblDLSubject.Text);

					cb.SetTextMatrix((Col3Left + ((Col4Left - Col3Left) / 2) - (cb.GetEffectiveStringWidth(lblDLMarksObtd.Text, false) / 2)), YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText(lblDLMarksObtd.Text);

					cb.SetTextMatrix((Col4Left + ((Col5Left - Col4Left) / 2) - (cb.GetEffectiveStringWidth(lblDLMarksOutOf.Text, false) / 2)), YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText(lblDLMarksOutOf.Text);

					cb.SetTextMatrix((Col5Left + ((Col6Left - Col5Left) / 2) - (cb.GetEffectiveStringWidth(lblDLCentreRank.Text, false) / 2)), YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText(lblDLCentreRank.Text);

					cb.SetTextMatrix((Col6Left + ((Col7Left - Col6Left) / 2) - (cb.GetEffectiveStringWidth(lblDLOvarllRank.Text, false) / 2)), YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText(lblDLOvarllRank.Text);

					cb.MoveTo(20, YPos - 5);
					cb.LineTo(570, YPos - 5);
					cb.Stroke();
				}

				cb.MoveTo(20, TableStartYPos);
				cb.LineTo(20, YPos - 5);
				cb.Stroke();

				cb.MoveTo(Col1Left - 5, TableStartYPos);
				cb.LineTo(Col1Left - 5, YPos - 5);
				cb.Stroke();

				cb.MoveTo(Col2Left - 5, TableStartYPos);
				cb.LineTo(Col2Left - 5, YPos - 5);
				cb.Stroke();

				cb.MoveTo(Col3Left, TableStartYPos);
				cb.LineTo(Col3Left, YPos - 5);
				cb.Stroke();

				cb.MoveTo(Col4Left, TableStartYPos);
				cb.LineTo(Col4Left, YPos - 5);
				cb.Stroke();

				cb.MoveTo(Col5Left, TableStartYPos);
				cb.LineTo(Col5Left, YPos - 5);
				cb.Stroke();

				cb.MoveTo(Col6Left, TableStartYPos);
				cb.LineTo(Col6Left, YPos - 5);
				cb.Stroke();

				cb.MoveTo(Col7Left, TableStartYPos);
				cb.LineTo(Col7Left, YPos - 5);
				cb.Stroke();


				YPos = YPos - 25;

				//For MCQ Type test
				if (ddlTestCategory.SelectedValue == "002") {
					cb.SetTextMatrix(25, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE);
					cb.ShowText("Details of Answering");
					cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL);

					cb.MoveTo(20, YPos - 10);
					cb.LineTo(570, YPos - 10);
					cb.Stroke();
					TableStartYPos = YPos - 10;

					YPos = YPos - 25;

					Col0Left = 25;
					Col1Left = Col0Left + 65;
					Col2Left = Col1Left + 70;
					Col3Left = Col2Left + 65;
					Col4Left = Col3Left + 40;
					Col5Left = Col4Left + 100;
					Col6Left = Col5Left + 100;
					Col7Left = 570;
					//Col6Left + 60

					cb.SetTextMatrix(Col0Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Test Name");

					cb.SetTextMatrix(Col1Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Subject");

					cb.SetTextMatrix(Col2Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Status");

					cb.SetTextMatrix((Col3Left + ((Col4Left - Col3Left) / 2) - (cb.GetEffectiveStringWidth("Count", false) / 2)), YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Count");

					cb.SetTextMatrix(Col4Left + 5, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Que No");

					//cb.SetTextMatrix((Col5Left + ((Col6Left - Col5Left) / 2) - (cb.GetEffectiveStringWidth("Que No - Moderate", False) / 2)), YPos)
					//cb.SetFontAndSize(bf, 10)
					//cb.ShowText("Que No - Moderate")

					//cb.SetTextMatrix((Col6Left + ((Col7Left - Col6Left) / 2) - (cb.GetEffectiveStringWidth("Que No - Difficult", False) / 2)), YPos)
					//cb.SetFontAndSize(bf, 10)
					//cb.ShowText("Que No - Difficult")

					cb.MoveTo(20, YPos - 5);
					cb.LineTo(570, YPos - 5);
					cb.Stroke();

					foreach (DataListItem dtlItem1 in dlPrint_Answering.Items) {
						Label lblDLTestName = (Label)dtlItem1.FindControl("lblDLTestName");
						Label lblDLSubjectName = (Label)dtlItem1.FindControl("lblDLSubjectName");
						Label lblDLResultStatus = (Label)dtlItem1.FindControl("lblDLResultStatus");
						Label lblDLResultCount = (Label)dtlItem1.FindControl("lblDLResultCount");
						Label lblDLEasy = (Label)dtlItem1.FindControl("lblDLEasy");
						Label lblDLModerate = (Label)dtlItem1.FindControl("lblDLModerate");
						Label lblDLDifficult = (Label)dtlItem1.FindControl("lblDLDifficult");

						YPos = YPos - 20;
						cb.SetTextMatrix(Col0Left, YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(lblDLTestName.Text);

						cb.SetTextMatrix(Col1Left, YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(Strings.Left(lblDLSubjectName.Text, 10));

						cb.SetTextMatrix(Col2Left, YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(lblDLResultStatus.Text);

						cb.SetTextMatrix((Col3Left + ((Col4Left - Col3Left) / 2) - (cb.GetEffectiveStringWidth(lblDLResultCount.Text, false) / 2)), YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(lblDLResultCount.Text);

						//cb.SetTextMatrix(Col4Left + 5, YPos)
						//cb.SetFontAndSize(bf, 10)
						//cb.ShowText(lblDLEasy.Text)

						float Yp1PDF = 0;
						float ActPos = 0;
						string TotalMatter = null;
						string DummyMatter = null;
						string PrintMatter = null;
						dynamic SplitMatter = null;

						Yp1PDF = YPos;
						ActPos = YPos;
						TotalMatter = lblDLEasy.Text + lblDLModerate.Text + lblDLDifficult.Text;

						int Cnt = 0;
						Cnt = 0;
						if (!string.IsNullOrEmpty(Strings.Trim(TotalMatter))) {
							Yp1PDF = Yp1PDF + 20;

							DummyMatter = TotalMatter;
							SplitMatter = Strings.Split(TotalMatter, Constants.vbCrLf);
							for (EntCnt = 0; EntCnt <= Cnt; EntCnt++) {
								TotalMatter = SplitMatter(EntCnt);
								Again1PDF:
								Yp1PDF = Yp1PDF - 20;
								PrintMatter = "";
								for (ChrCnt = 1; ChrCnt <= Strings.Len(TotalMatter); ChrCnt++) {
									if (string.IsNullOrEmpty(Strings.Trim(TotalMatter))) {
										PrintMatter = "";
									} else {
										PrintMatter = Strings.Left(TotalMatter, ChrCnt);
									}
									if (cb.GetEffectiveStringWidth(PrintMatter, true) >= (Col7Left - Col4Left - 10)) {
										//Search for last blank space
										ChrCnt = Strings.InStrRev(PrintMatter, ",");
										PrintMatter = Strings.Left(TotalMatter, ChrCnt);

										cb.SetTextMatrix(Col4Left + 5, Yp1PDF);
										cb.SetFontAndSize(bf, 10);
										cb.ShowText(PrintMatter);

										TotalMatter = Strings.Right(TotalMatter, Strings.Len(TotalMatter) - ChrCnt);
										goto Again1PDF;
									}
								}

								cb.SetTextMatrix(Col4Left + 5, Yp1PDF);
								cb.SetFontAndSize(bf, 10);
								cb.ShowText(PrintMatter);
							}
						}

						YPos = Yp1PDF;

						//cb.SetTextMatrix((Col5Left + ((Col6Left - Col5Left) / 2) - (cb.GetEffectiveStringWidth(lblDLModerate.Text, False) / 2)), YPos)
						//cb.SetFontAndSize(bf, 10)
						//cb.ShowText(lblDLModerate.Text)

						//cb.SetTextMatrix((Col6Left + ((Col7Left - Col6Left) / 2) - (cb.GetEffectiveStringWidth(lblDLDifficult.Text, False) / 2)), YPos)
						//cb.SetFontAndSize(bf, 10)
						//cb.ShowText(lblDLDifficult.Text)

						cb.MoveTo(20, YPos - 5);
						cb.LineTo(570, YPos - 5);
						cb.Stroke();
					}

					cb.MoveTo(20, TableStartYPos);
					cb.LineTo(20, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col1Left - 5, TableStartYPos);
					cb.LineTo(Col1Left - 5, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col2Left - 5, TableStartYPos);
					cb.LineTo(Col2Left - 5, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col3Left, TableStartYPos);
					cb.LineTo(Col3Left, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col4Left, TableStartYPos);
					cb.LineTo(Col4Left, YPos - 5);
					cb.Stroke();

					//cb.MoveTo(Col5Left, TableStartYPos)
					//cb.LineTo(Col5Left, YPos - 5)
					//cb.Stroke()

					//cb.MoveTo(Col6Left, TableStartYPos)
					//cb.LineTo(Col6Left, YPos - 5)
					//cb.Stroke()

					cb.MoveTo(Col7Left, TableStartYPos);
					cb.LineTo(Col7Left, YPos - 5);
					cb.Stroke();
				}

				if (chkOverallRankFlag.Checked == true) {


					YPos = YPos - 25;

					cb.SetTextMatrix(25, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE);
					cb.ShowText("Overall Toppers");
					cb.SetTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_FILL);

					cb.MoveTo(20, YPos - 10);
					cb.LineTo(570, YPos - 10);
					cb.Stroke();
					TableStartYPos = YPos - 10;

					YPos = YPos - 25;

					Col0Left = 25;
					Col1Left = Col0Left + 65;
					Col2Left = Col1Left + 70;
					Col3Left = Col2Left + 205;
					Col4Left = Col3Left + 150;
					Col5Left = 570;
					//Col6Left + 60

					cb.SetTextMatrix(Col0Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Test Name");

					cb.SetTextMatrix(Col1Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Subject");

					cb.SetTextMatrix(Col2Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Name of Student");

					cb.SetTextMatrix(Col3Left, YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Centre");

					cb.SetTextMatrix((Col4Left + ((Col5Left - Col4Left) / 2) - (cb.GetEffectiveStringWidth("Score", false) / 2)), YPos);
					cb.SetFontAndSize(bf, 10);
					cb.ShowText("Score");

					cb.MoveTo(20, YPos - 5);
					cb.LineTo(570, YPos - 5);
					cb.Stroke();

					foreach (DataListItem dtlItem1 in dlPrint_Topper.Items) {
						Label lblDLTestName = (Label)dtlItem1.FindControl("lblDLTestName");
						Label lblDLSubject = (Label)dtlItem1.FindControl("lblDLSubject");
						Label lblDLStudentName = (Label)dtlItem1.FindControl("lblDLStudentName");
						Label lblDLCentre = (Label)dtlItem1.FindControl("lblDLCentre");
						Label lblDLScore = (Label)dtlItem1.FindControl("lblDLScore");

						YPos = YPos - 20;
						cb.SetTextMatrix(Col0Left, YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(lblDLTestName.Text);

						cb.SetTextMatrix(Col1Left, YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(Strings.Left(lblDLSubject.Text, 10));

						cb.SetTextMatrix(Col2Left, YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(lblDLStudentName.Text);

						cb.SetTextMatrix(Col3Left, YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(lblDLCentre.Text);

						cb.SetTextMatrix((Col4Left + ((Col5Left - Col4Left) / 2) - (cb.GetEffectiveStringWidth(lblDLScore.Text, false) / 2)), YPos);
						cb.SetFontAndSize(bf, 10);
						cb.ShowText(lblDLScore.Text);

						cb.MoveTo(20, YPos - 5);
						cb.LineTo(570, YPos - 5);
						cb.Stroke();
					}

					cb.MoveTo(20, TableStartYPos);
					cb.LineTo(20, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col1Left - 5, TableStartYPos);
					cb.LineTo(Col1Left - 5, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col2Left - 5, TableStartYPos);
					cb.LineTo(Col2Left - 5, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col3Left - 5, TableStartYPos);
					cb.LineTo(Col3Left - 5, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col4Left, TableStartYPos);
					cb.LineTo(Col4Left, YPos - 5);
					cb.Stroke();

					cb.MoveTo(Col5Left, TableStartYPos);
					cb.LineTo(Col5Left, YPos - 5);
					cb.Stroke();

				}
				YPos = YPos - 25;


				//document.Add(New Paragraph("STATEMENT OF MARKS", TitleFont))

				//Dim orderInfoTable = New PdfPTable(2)
				//orderInfoTable.HorizontalAlignment = 0
				//orderInfoTable.SpacingBefore = 10
				//orderInfoTable.SpacingAfter = 10
				//orderInfoTable.DefaultCell.Border = 1
				//orderInfoTable.SetWidths(New Integer() {1, 4})

				//orderInfoTable.AddCell(New Phrase("Order:", boldTableFont))
				//orderInfoTable.AddCell(lblPrint_RollNo.Text)
				//orderInfoTable.AddCell(New Phrase("Price:", boldTableFont))
				//'orderInfoTable.AddCell(Convert.ToDecimal(txtTotalPrice.Text).ToString("c"))
				//orderInfoTable.AddCell(lblPrint_StudentName.Text)

				//document.Add(orderInfoTable)


				cb.EndText();


				writer.CloseStream = false;
				document.Close();
				output.Position = 0;


				//EMail code should come over here
				//Dim bytes As Byte() = MemoryStream.ToArray()
				//memoryStream.Close()

				MailMessage Msg = new MailMessage();
				MailAddress fromMail = new MailAddress("mtsttdept@gmail.com");
				string CurTimeFrame = null;
				CurTimeFrame = System.DateTime.Now.ToString("ddMMyyyyhhmmss");

				// Sender e-mail address.
				Msg.From = fromMail;

				// Recipient e-mail address.
				Msg.To.Add(new MailAddress(lblStudentEmail.Text.Trim));

				// Subject of e-mail
				Msg.Subject = "Statement of Marks for " + lblStudentName.Text;
				Msg.Body += "Dear Parent <br/><br/>Please find enclosed a PDF file containing Statement of Marks for your ward " + lblStudentName.Text + " for " + lblStandard_Result.Text + " standard at MT Educare.";

				Msg.Attachments.Add(new Attachment(output, "StatementOfMarks.pdf"));

				Msg.IsBodyHtml = true;
				string sSmtpServer = "";
				sSmtpServer = "smtp.gmail.com";
				SmtpClient a = new SmtpClient();
				a.Host = sSmtpServer;

				a.EnableSsl = true;


				NetworkCredential NetworkCred = new NetworkCredential();
				NetworkCred.UserName = "mtsttdept@gmail.com";
				NetworkCred.Password = "science11";
				a.UseDefaultCredentials = true;
				a.Credentials = NetworkCred;
				a.Port = 587;
				a.Timeout = 20000;
				a.Send(Msg);

				output.Close();

				//Response.Clear()
				//Response.ContentType = "application/pdf"
				//Response.AddHeader("Content-Disposition", String.Format("attachment;filename=StudentMarkSheet{0}.pdf", CurTimeFrame))
				//Response.ContentType = "application/pdf"
				//Response.Buffer = True
				//Response.Cache.SetCacheability(HttpCacheability.NoCache)
				//Response.BinaryWrite(bytes)
				//Response.[End]()
				Response.Close();


			}
		}




		//Response.ContentType = "application/pdf"
		//Response.AddHeader("Content-Disposition", String.Format("attachment;filename=StudentMarkSheet{0}.pdf", CurTimeFrame))
		//Response.BinaryWrite(output.ToArray())

		Show_Error_Success_Box("S", "PDF File generated successfully.");

		btnStudSelect_Close_Click(sender, e);
	}
	public Report_MarkSheet()
	{
		Load += Page_Load;
	}
}